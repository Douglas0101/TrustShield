# docker-compose.yml (Versão 11.0.0 - Robusto com .env)
# Utiliza um arquivo .env na raiz para gerenciar credenciais.
services:
  postgres:
    image: postgres:13.12
    container_name: trustshield-postgres
    ports:
      - "5432:5432"
    environment:
      # CORREÇÃO: As credenciais são lidas do arquivo .env
      - POSTGRES_USER=${POSTGRES_USER:-mlflow}
      - POSTGRES_DB=${POSTGRES_DB:-mlflow}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - trustshield-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mlflow} -d ${POSTGRES_DB:-mlflow}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: trustshield-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      # CORREÇÃO: As credenciais são lidas do arquivo .env
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - trustshield-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 2s
      retries: 5
    restart: unless-stopped

  create-buckets:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    environment:
      # CORREÇÃO: Passa as credenciais como variáveis de ambiente
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    entrypoint: >
      /bin/sh -c "
      echo 'Aguardando MinIO...';
      mc alias set myminio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD --api S3v4;
      echo 'Verificando/Criando bucket mlflow...';
      mc ls myminio/mlflow || mc mb myminio/mlflow;
      echo 'Bucket mlflow pronto.';
      exit 0;
      "
    networks:
      - trustshield-net

  mlflow:
    build:
      context: .
      dockerfile: docker/mlflow.Dockerfile
    container_name: trustshield-mlflow
    ports:
      - "5000:5000"
    environment:
      # CORREÇÃO: As credenciais são lidas do arquivo .env
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER:-mlflow}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: >
      mlflow server
        --host 0.0.0.0
        --port 5000
        --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB:-mlflow}
        --default-artifact-root s3://mlflow/
    depends_on:
      postgres:
        condition: service_healthy
      create-buckets:
        condition: service_completed_successfully
    networks:
      - trustshield-net
    restart: unless-stopped

  trustshield-api:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: trustshield-api
    ports:
      - "8000:8000"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./src:/home/trustshield/src
      - ./outputs:/home/trustshield/outputs
      - ./config:/home/trustshield/config
      - ./data:/home/trustshield/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 15s
      timeout: 5s
      retries: 5
    depends_on:
      mlflow:
        condition: service_started
    networks:
      - trustshield-net
    restart: unless-stopped

networks:
  trustshield-net:
    driver: bridge

volumes:
  postgres_data:
  minio_data: