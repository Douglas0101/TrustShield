# docker-compose.yml (Versão 13.0.0 - Final e Simplificada)
services:
  postgres:
    image: postgres:13.12
    container_name: trustshield-postgres
    ports: ["5432:5432"]
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      # A senha é passada diretamente como variável de ambiente para consistência.
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes: [postgres_data:/var/lib/postgresql/data]
    networks: [trustshield-net]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: trustshield-minio
    ports: ["9000:9000", "9001:9001"]
    # REVISÃO: Usa variáveis de ambiente do .env como única fonte de verdade.
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes: [minio_data:/data]
    networks: [trustshield-net]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 2s
      retries: 10
    restart: unless-stopped

  create-buckets:
    image: minio/mc:latest
    depends_on:
      minio: { condition: service_healthy }
    # REVISÃO: Também usa variáveis de ambiente do .env para garantir consistência.
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    entrypoint: >
      /bin/sh -c "
      set -e;
      mc alias set myminio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;
      mc ls myminio/mlflow > /dev/null 2>&1 || mc mb myminio/mlflow;
      echo 'Bucket mlflow verificado/criado com sucesso.';
      exit 0;
      "
    networks: [trustshield-net]

  mlflow:
    build:
      context: .
      dockerfile: docker/mlflow.Dockerfile
    container_name: trustshield-mlflow
    ports: ["5000:5000"]
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD} # Passa a senha do PG via .env
      - POSTGRES_DB=${POSTGRES_DB}
    entrypoint:
      - "/bin/sh"
      - "-c"
      - |
        set -e
        echo 'Serviço MLflow: Aguardando pelo PostgreSQL...'
        until nc -z postgres 5432; do sleep 1; done;
        echo "\nPostgreSQL pronto. Iniciando servidor MLflow..."
        exec mlflow server \
          --host 0.0.0.0 --port 5000 \
          --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB} \
          --default-artifact-root s3://mlflow/
    depends_on:
      postgres: { condition: service_healthy }
      create-buckets: { condition: service_completed_successfully }
    networks: [trustshield-net]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 15
      start_period: 120s
    restart: unless-stopped

  trustshield-api:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: trustshield-api
    ports: ["8000:8000"]
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./src:/home/trustshield/src
      - ./config:/home/trustshield/config
      - ./outputs:/home/trustshield/outputs
      - ./data:/home/trustshield/data
    depends_on:
      mlflow: { condition: service_healthy }
    networks: [trustshield-net]
    restart: unless-stopped
    command: ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000"]

networks:
  trustshield-net: { driver: bridge }

volumes:
  postgres_data:
  minio_data:

# REVISÃO: Bloco 'secrets' removido completamente para simplificar.
# A configuração agora vem inteiramente do arquivo .env.