# Makefile - TrustShield Advanced (Vers√£o 8.1.0 - Otimizada e Robusta)
# Otimizado por Engenheiro de IA
.PHONY: help install test lint format clean services-up services-down services-up-fresh train logs purge

# --- CONFIGURA√á√ïES GLOBAIS ---
# Centraliza o comando do Docker Compose para f√°cil manuten√ß√£o.
COMPOSE_FILE := docker/docker-compose.yml
COMPOSE_CMD := docker compose -f $(COMPOSE_FILE)

# Define a meta 'help' como padr√£o quando 'make' √© executado sem argumentos.
.DEFAULT_GOAL := help

# === AJUDA ===
help:
	@echo "TrustShield Advanced - Comandos Dispon√≠veis:"
	@echo ""
	@echo "--- GEST√ÉO DE SERVI√áOS (PERSISTENTES) ---"
	@echo "  services-up         - Inicia todos os servi√ßos (API, Postgres, MinIO, MLflow) em segundo plano."
	@echo "  services-down       - Para os servi√ßos de backend sem apagar os dados."
	@echo "  services-up-fresh   - Reconstr√≥i a imagem unificada e reinicia os servi√ßos. Use para aplicar grandes mudan√ßas."
	@echo "  logs [service]      - Mostra os logs de um servi√ßo (ex: make logs service=mlflow). Padr√£o: trustshield-api."
	@echo ""
	@echo "--- PIPELINE & TAREFAS (EF√äMERAS) ---"
	@echo "  train [args]        - Executa o pipeline de treino completo dentro do Docker (ex: make train args='--model lof')."
	@echo "  build [service]     - Reconstr√≥i a imagem de um servi√ßo espec√≠fico (ex: make build service=trustshield-api)."
	@echo ""
	@echo "--- LIMPEZA COMPLETA (DESTRUTIVO) ---"
	@echo "  purge               - PARA TUDO e APAGA TODOS os dados (cont√™ineres, volumes, redes). Use com cuidado!"


# --- GEST√ÉO DE SERVI√áOS (PERSISTENTES) ---
services-up:
	@echo "üöÄ Iniciando todos os servi√ßos do TrustShield em segundo plano..."
	$(COMPOSE_CMD) up -d

services-down:
	@echo "üõë Parando todos os servi√ßos do TrustShield..."
	$(COMPOSE_CMD) down

services-up-fresh:
	@echo "üîÑ Reiniciando e reconstruindo os servi√ßos do TrustShield..."
	$(COMPOSE_CMD) up -d --build --force-recreate --remove-orphans

service ?= trustshield-api
logs:
	@echo "üîé Acompanhando os logs do servi√ßo: $(service)..."
	$(COMPOSE_CMD) logs -f $(service)

build:
	@echo "üõ†Ô∏è  Reconstruindo a imagem do servi√ßo: $(service)..."
	$(COMPOSE_CMD) build $(service)

# --- PIPELINE & TAREFAS (EF√äMERAS) ---
# Usa --entrypoint="" para executar comandos arbitr√°rios no cont√™iner da API.
args ?= --model isolation_forest
train: services-up
	@echo "üß† Executando o pipeline de treino no ambiente unificado..."
	@echo "   Comando: python /home/trustshield/src/models/train_fraud_model.py $(args)"
	$(COMPOSE_CMD) exec trustshield-api python /home/trustshield/src/models/train_fraud_model.py $(args)

# --- LIMPEZA COMPLETA (DESTRUTIVO) ---
# CORRE√á√ÉO: Substitu√≠do '@read -r' por um snippet de shell compat√≠vel com /bin/sh.
purge:
	@echo "üî•üî•üî• ATEN√á√ÉO: Parando todos os servi√ßos e APAGANDO TODOS OS VOLUMES DE DADOS! üî•üî•üî•"
	@echo "üî• Esta a√ß√£o √© irrevers√≠vel. Pressione Enter para continuar ou Ctrl+C para cancelar."
	@read -p "Confirma√ß√£o: " REPLY; \
	$(COMPOSE_CMD) down --volumes
	@echo "üßπ Limpando cache do builder do Docker..."
	docker builder prune -a -f
	@echo "üßπ Limpando outros recursos do Docker..."
	docker system prune -a -f
	@echo "‚úÖ Limpeza completa finalizada."


# =====================================================================================
# === SE√á√ÉO DE DESENVOLVIMENTO LOCAL (N√£o usa Docker) ===
# =====================================================================================
install:
	pip install -r requirements.txt
	pre-commit install

test:
	pytest tests/test_advanced.py -v

lint:
	flake8 src