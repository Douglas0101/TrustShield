# Makefile - TrustShield Advanced (Vers√£o 9.0.0 - Robusto e Otimizado)
.PHONY: help install test lint format clean services-up services-down services-up-fresh train logs purge

# --- CONFIGURA√á√ÉO E PR√â-REQUISITOS ---

# Verifica a exist√™ncia do arquivo .env, que √© crucial para a configura√ß√£o.
# Se n√£o existir, interrompe a execu√ß√£o com uma mensagem de ajuda.
ifeq ($(wildcard ./.env),)
    $(error .env file not found. Please create it by copying .env.example: `cp .env.example .env`)
endif

# Define o comando base do Docker Compose para ser usado em todo o Makefile.
DOCKER_COMPOSE_CMD = docker compose --env-file ./.env

# =====================================================================================
# === SE√á√ÉO DOCKER: O CORA√á√ÉO DA OPERA√á√ÉO ===
# =====================================================================================

services-up:
	@echo "üöÄ Subindo todos os servi√ßos de suporte e aguardando que fiquem saud√°veis..."
	# O flag --wait √© crucial: ele pausa at√© que os healthchecks de todos os servi√ßos passem.
	$(DOCKER_COMPOSE_CMD) up -d --wait
	@echo "‚úÖ Todos os servi√ßos est√£o prontos e saud√°veis."

services-down:
	@echo "üõë Parando todos os servi√ßos..."
	# --remove-orphans limpa cont√™ineres que n√£o s√£o mais necess√°rios.
	$(DOCKER_COMPOSE_CMD) down --remove-orphans

services-up-fresh: services-down
	@echo "üßº Reconstruindo imagens e subindo todos os servi√ßos do zero..."
	# Adicionado --wait para consist√™ncia e robustez. Garante que mesmo ap√≥s
	# uma reconstru√ß√£o, o comando s√≥ termina quando tudo est√° saud√°vel.
	$(DOCKER_COMPOSE_CMD) up -d --build --force-recreate --remove-orphans --wait
	@echo "‚úÖ Todos os servi√ßos foram reconstru√≠dos e est√£o prontos e saud√°veis."

# Define 'mlflow' como o servi√ßo padr√£o para logs, mas permite override.
# Exemplo: make logs service=trustshield-api
service ?= mlflow
logs:
	@echo "üîé Acompanhando os logs do servi√ßo: $(service)... (Pressione Ctrl+C para sair)"
	$(DOCKER_COMPOSE_CMD) logs -f $(service)

# Define o modelo padr√£o para treino, mas permite override.
# Exemplo: make train args="--model random_forest"
args ?= --model isolation_forest
process-data:
	@echo "üîß Executando o pipeline de processamento de dados..."
	$(DOCKER_COMPOSE_CMD) exec trustshield-api python /home/trustshield/src/data/make_dataset.py
	$(DOCKER_COMPOSE_CMD) exec trustshield-api python /home/trustshield/src/features/build_features.py
	@echo "‚úÖ Processamento de dados conclu√≠do."

train: services-up process-data # <-- REVIS√ÉO CR√çTICA: Adiciona depend√™ncia para garantir que tudo est√° UP.
	@echo "üß† Ambiente pronto. Executando o pipeline de treino no cont√™iner da API..."
	@echo "   Comando: python /home/trustshield/src/models/train_fraud_model.py $(args)"
	$(DOCKER_COMPOSE_CMD) exec trustshield-api python /home/trustshield/src/models/train_fraud_model.py $(args)
	@echo "‚úÖ Treino conclu√≠do."

purge:
	@echo "üî•üî•üî• ATEN√á√ÉO: Parando e APAGANDO TODOS OS DADOS! üî•üî•üî•"
	$(DOCKER_COMPOSE_CMD) down --volumes
	@echo "üßπ Limpando recursos do Docker (cache de build e imagens n√£o utilizadas)..."
	docker builder prune -a -f
	docker system prune -f
	@echo "üßº Limpeza completa."

# =====================================================================================
# === SE√á√ÉO DE DESENVOLVIMENTO LOCAL ===
# =====================================================================================

help:
	@echo "TrustShield Advanced - Comandos Dispon√≠veis:"
	@echo ""
	@echo "--- GEST√ÉO DE SERVI√áOS ---"
	@echo "  services-up         - Inicia todos os servi√ßos e aguarda ficarem saud√°veis."
	@echo "  services-down       - Para todos os servi√ßos."
	@echo "  services-up-fresh   - PARA, reconstr√≥i e reinicia todos os servi√ßos, aguardando ficarem saud√°veis."
	@echo "  logs [service=...]  - Mostra os logs de um servi√ßo (padr√£o: mlflow)."
	@echo "  purge               - PARA TUDO e APAGA TODOS os dados (cont√™ineres, volumes, redes)."
	@echo ""
	@echo "--- PIPELINE & TAREFAS ---"
	@echo "  train [args=...]    - Executa o pipeline de treino (padr√£o: --model isolation_forest)."
	@echo ""
	@echo "--- QUALIDADE DE C√ìDIGO ---"
	@echo "  install             - Instala depend√™ncias locais e hooks de pr√©-commit."
	@echo "  test                - Roda os testes com pytest."
	@echo "  lint                - Roda os linters (flake8, mypy)."
	@echo "  format              - Formata o c√≥digo com black."
	@echo "  clean               - Remove arquivos tempor√°rios do Python."


install:
	pip install -r requirements.txt
	pre-commit install

test:
	pytest tests/test_advanced.py -v

lint:
	flake8 src/ tests/
	mypy src/

format:
	black src/ tests/

clean:
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	rm -rf .coverage htmlcov/ .pytest_cache/ cache/