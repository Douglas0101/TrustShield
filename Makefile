# Makefile - TrustShield Advanced (Vers√£o 5.2.0-stable)
# Filosofia: Separa a gest√£o dos SERVI√áOS (que guardam dados) das TAREFAS (que rodam e terminam).
.PHONY: help install test lint format clean build build-fresh train logs services-up services-down purge

# === AJUDA ===
help:
	@echo "TrustShield Advanced - Comandos Dispon√≠veis:"
	@echo ""
	@echo "--- GEST√ÉO DE SERVI√áOS (PERSISTENTES) ---"
	@echo "  services-up    - Inicia os servi√ßos de backend (Postgres, MinIO, MLflow UI) em segundo plano."
	@echo "  services-down  - Para os servi√ßos de backend sem apagar os dados."
	@echo "  logs [service] - Mostra os logs de um servi√ßo (ex: make logs service=mlflow). Padr√£o: trustshield-trainer."
	@echo ""
	@echo "--- PIPELINE & TAREFAS (EF√äMERAS) ---"
	@echo "  build          - Constr√≥i (ou reconstr√≥i) a imagem Docker da aplica√ß√£o usando cache."
	@echo "  build-fresh    - Constr√≥i a imagem do zero, IGNORANDO O CACHE. Use para depura√ß√£o."
	@echo "  train          - Executa o pipeline de treino completo dentro do Docker. Requer 'services-up'."
	@echo ""
	@echo "--- LIMPEZA COMPLETA (DESTRUTIVO) ---"
	@echo "  purge          - PARA TUDO e APAGA TODOS os dados (cont√™ineres, volumes, redes). Use com cuidado!"
	@echo ""
	@echo "--- DESENVOLVIMENTO LOCAL ---"
	@echo "  install        - Instalar depend√™ncias locais e pre-commit."
	@echo "  test           - Executar testes locais."
	@echo "  lint           - Verificar o estilo do c√≥digo localmente."
	@echo "  format         - Formatar o c√≥digo localmente."
	@echo "  clean          - Limpar ficheiros tempor√°rios do Python."

# =====================================================================================
# === SE√á√ÉO DOCKER: O CORA√á√ÉO DA OPERA√á√ÉO ===
# =====================================================================================

# --- GEST√ÉO DE SERVI√áOS (PERSISTENTES) ---
services-up:
	@echo "üöÄ Subindo os servi√ßos de backend (Postgres, MinIO, MLflow)..."
	docker compose -f docker/docker-compose.yml up -d

services-down:
	@echo "üõë Parando os servi√ßos de backend..."
	docker compose -f docker/docker-compose.yml down

service ?= trustshield-trainer
logs:
	@echo "üîé Acompanhando os logs do servi√ßo: $(service)..."
	docker compose -f docker/docker-compose.yml logs -f $(service)

# --- PIPELINE & TAREFAS (EF√äMERAS) ---
build:
	@echo "üõ†Ô∏è  Construindo a imagem 'trustshield-advanced:latest'..."
	docker build -t trustshield-advanced:latest -f docker/Dockerfile .

# ESTA √â A REGRA QUE FALTAVA. ELA FOR√áA A RECONSTRU√á√ÉO.
build-fresh:
	@echo "üßº Construindo a imagem 'trustshield-advanced:latest' do zero (sem cache)..."
	docker build --no-cache -t trustshield-advanced:latest -f docker/Dockerfile .

train:
	@echo "üß† Executando o pipeline de treino..."
	docker compose -f docker/docker-compose.yml run --rm trustshield-trainer

# --- LIMPEZA COMPLETA (DESTRUTIVO) ---
purge:
	@echo "üî•üî•üî• ATEN√á√ÉO: Parando todos os servi√ßos e APAGANDO TODOS OS VOLUMES DE DADOS! üî•üî•üî•"
	docker compose -f docker/docker-compose.yml down --volumes
	@echo "üßπ Limpando cache do builder do Docker..."
	docker builder prune -a -f
	@echo "üßπ Limpando outros recursos do Docker..."
	docker system prune -f


# =====================================================================================
# === SE√á√ÉO DE DESENVOLVIMENTO LOCAL (N√£o usa Docker) ===
# =====================================================================================
install:
	pip install -r requirements.txt
	pre-commit install

test:
	pytest tests/test_advanced.py -v

lint:
	flake8 src/ tests/
	mypy src/

format:
	black src/ tests/

clean:
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	rm -rf .coverage htmlcov/ .pytest_cache/