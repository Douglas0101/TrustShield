# Makefile - TrustShield Advanced (Vers√£o 7.8.0 - Definitiva)
.PHONY: help install test lint format clean services-up services-down services-up-fresh train logs purge

# --- AJUDA ---
help:
	@echo "TrustShield Advanced - Comandos Dispon√≠veis:"
	@echo ""
	@echo "--- GEST√ÉO DE SERVI√áOS ---"
	@echo "  services-up         - Inicia todos os servi√ßos de suporte em segundo plano."
	@echo "  services-down       - Para todos os servi√ßos de suporte."
	@echo "  services-up-fresh   - PARA, reconstr√≥i e reinicia todos os servi√ßos."
	@echo "  logs [service]      - Mostra os logs de um servi√ßo (padr√£o: mlflow)."
	@echo ""
	@echo "--- PIPELINE & TAREFAS ---"
	@echo "  train [args]        - Executa o pipeline de treino (padr√£o: --model isolation_forest)."
	@echo ""
	@echo "--- LIMPEZA ---"
	@echo "  purge               - PARA TUDO e APAGA TODOS os dados (cont√™ineres, volumes, redes)."
	@echo ""

# =====================================================================================
# === SE√á√ÉO DOCKER: O CORA√á√ÉO DA OPERA√á√ÉO ===
# =====================================================================================

# Passa o ficheiro .env explicitamente para todos os comandos
DOCKER_COMPOSE_CMD = docker compose --env-file ./.env -f docker/docker-compose.yml

services-up:
	@echo "üöÄ Subindo todos os servi√ßos de suporte e aguardando que fiquem saud√°veis..."
	$(DOCKER_COMPOSE_CMD) up -d --wait
	@echo "‚úÖ Todos os servi√ßos est√£o prontos."

services-down:
	@echo "üõë Parando todos os servi√ßos..."
	$(DOCKER_COMPOSE_CMD) down --remove-orphans

services-up-fresh: services-down
	@echo "üßº Reconstruindo a imagem e subindo todos os servi√ßos do zero..."
	$(DOCKER_COMPOSE_CMD) up -d --build --force-recreate --remove-orphans

service ?= mlflow
logs:
	@echo "üîé Acompanhando os logs do servi√ßo: $(service)..."
	$(DOCKER_COMPOSE_CMD) logs -f $(service)

args ?= --model isolation_forest
train:
	@echo "üß† Executando o pipeline de treino no ambiente unificado..."
	# CORRE√á√ÉO: Usa 'exec' em vez de 'run'. 'exec' executa um comando num contentor J√Å A CORRER,
	# o que evita a condi√ß√£o de corrida e n√£o precisa do entrypoint.sh.
	# Primeiro, garantimos que o servi√ßo 'trustshield-api' est√° a correr.
	$(DOCKER_COMPOSE_CMD) up -d trustshield-api
	@echo "   Servi√ßo da API est√° pronto. A executar a tarefa de treino dentro dele..."
	@echo "   Comando: python /home/trustshield/src/models/train_fraud_model.py $(args)"
	$(DOCKER_COMPOSE_CMD) exec trustshield-api python /home/trustshield/src/models/train_fraud_model.py $(args)

purge:
	@echo "üî•üî•üî• ATEN√á√ÉO: Parando e APAGANDO TODOS OS DADOS! üî•üî•üî•"
	$(DOCKER_COMPOSE_CMD) down --volumes
	@echo "üßπ Limpando recursos do Docker..."
	docker builder prune -a -f
	docker system prune -f

# =====================================================================================
# === SE√á√ÉO DE DESENVOLVIMENTO LOCAL ===
# =====================================================================================
install:
	pip install -r requirements.txt
	pre-commit install

test:
	pytest tests/test_advanced.py -v

lint:
	flake8 src/ tests/
	mypy src/

format:
	black src/ tests/

clean:
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	rm -rf .coverage htmlcov/ .pytest_cache/ cache/