# docker/docker-compose.yml (Versão 7.0.2-aligned)
services:
  postgres:
    image: postgres:13.12
    container_name: trustshield-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-mlflow}
      - POSTGRES_DB=${POSTGRES_DB:-mlflow}
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - trustshield-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mlflow} -d ${POSTGRES_DB:-mlflow}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "com.trustshield.component=storage"

  minio:
    image: minio/minio:latest
    container_name: trustshield-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    secrets:
      - minio_root_user
      - minio_root_password
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - trustshield-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 2s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "com.trustshield.component=artifact-store"

  create-buckets:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    secrets:
      - minio_root_user
      - minio_root_password
    entrypoint: >
      /bin/sh -c "
      echo 'Aguardando MinIO...';
      for i in {1..10}; do
        mc alias set myminio http://minio:9000 \$(cat /run/secrets/minio_root_user) \$(cat /run/secrets/minio_root_password) && break;
        echo 'Tentativa $i falhou. Aguardando 2s...';
        sleep 2;
      done;
      echo 'Verificando/Criando bucket mlflow...';
      mc ls myminio/mlflow || mc mb myminio/mlflow;
      echo 'Bucket mlflow pronto.';
      exit 0;
      "
    networks:
      - trustshield-net
    labels:
      - "com.trustshield.component=init"

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.14.3
    container_name: trustshield-mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    secrets:
      - minio_root_user
      - minio_root_password
      - postgres_password
    command: >
      bash -c "
      export AWS_ACCESS_KEY_ID=$(cat /run/secrets/minio_root_user) &&
      export AWS_SECRET_ACCESS_KEY=$(cat /run/secrets/minio_root_password) &&
      pip install boto3 psycopg2-binary &&
      mlflow server
        --host 0.0.0.0
        --port 5000
        --backend-store-uri postgresql://${POSTGRES_USER:-mlflow}:\$(cat /run/secrets/postgres_password)@postgres/${POSTGRES_DB:-mlflow}
        --default-artifact-root s3://mlflow/
      "
    depends_on:
      postgres:
        condition: service_healthy
      create-buckets:
        condition: service_completed_successfully
    volumes:
      - ./mlruns:/mlflow/mlruns  # Persiste experimentos MLflow
    networks:
      - trustshield-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "com.trustshield.component=tracking"

  trustshield-trainer:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: trustshield-trainer
    deploy:
      resources:
        limits:
          memory: ${TRAINER_MEM_LIMIT:-12g}
          cpus: '${TRAINER_CPU_LIMIT:-4.0}'
    volumes:
      - ./src:/home/trustshield/src
      - ./data:/home/trustshield/data
      - ./outputs:/home/trustshield/outputs
      - ./config:/home/trustshield/config
      - ./logs:/home/trustshield/logs
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    secrets:
      - minio_root_user
      - minio_root_password
    depends_on:
      mlflow:
        condition: service_healthy
    networks:
      - trustshield-net
    entrypoint: ["/bin/sh", "/home/trustshield/entrypoint.sh"]
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'python' || exit 1"]  # Verifica se o processo Python está rodando
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "com.trustshield.component=trainer"

networks:
  trustshield-net:
    driver: bridge

volumes:
  postgres_data:
  minio_data:

secrets:
  postgres_password:
    file: ../secrets/postgres_password.txt
  minio_root_user:
    file: ../secrets/minio_root_user.txt
  minio_root_password:
    file: ../secrets/minio_root_password.txt
